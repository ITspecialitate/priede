grammar priede
{
    options{
        Axiom = "root";
        Separator = "SEPARATOR";
    }
    terminals{
        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C;
        LineTerminator  -> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;

        CommentLine		-> '//' (.* - (.* LineTerminator .*)) LineTerminator 
                        | '//' (.* - (.* LineTerminator .*));
		CommentBlock	-> '/*' (.* - (.* '*/' .*)) '*/' ;
        SEPARATOR   -> (WHITE_SPACE | CommentLine | CommentBlock | LineTerminator)+;

        ID -> [a-zA-ZēūīāšģķļžčņĒĪĀŠĢĶĻŽČŅ_-]+;
        QUOTE -> '"';
        INTEGER -> [1-9] [0-9]* | '0' ;
        NUMBER -> INTEGER | '-'INTEGER;
        
        

        STRING	-> '"' (
									(. - ('"' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '"' |
                                '\'' (
									(. - ('\'' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '\'' ;
		
    }
    rules{
        BOOL_DEF -> 'būls'!;
        TEXT -> 'teksts'!;
        NUM -> 'sk'!;
        LONG -> 'lsk'!;
        NATURAL -> 'natsk'!;
        LONG_NAT -> 'lnatsk'!;

        TYPE -> BOOL_DEF^ | TEXT^ | LONG^ | NATURAL^ | LONG_NAT^ | NUM^;

        TRUE -> 'PAT'! | 'PATIESS'!;
        FALSE -> 'NEPAT'! | 'NEPATIESS'!;
        BOOL -> TRUE | FALSE;

        var_def -> TYPE ID '->'! var_def_value;
        var_def_value -> exp_plusmin^ | STRING^ ;

        asignable_exp -> exp_plusmin^ | STRING^;
        assign_op -> '->'^ | '-+>'^ | '-->'^ | '-*>'^ | '-/>'^;
        id_asign -> ID assign_op asignable_exp;

        func_call -> ID '('! funcargs ')'!
                   | ID '()'! ;

        funcargs -> exp|exp (','! exp)*;

        comp_s ->    exp '=' exp
                   | exp '>' exp
                   | exp '>=' exp
                   | exp '<' exp
                   | exp '>=' exp
                   | exp '!=' exp;

        comp -> comp_s^ |
                comp_s^ 'vai' comp |
                comp_s^ 'un' comp|
                BOOL^|
                exp^;

        if -> 'ja'! comp '{'! block '}'!
            | 'ja'! comp '{'! block '}'! 'citādi' '{'! block '}'!;

        exp_atom -> NUMBER^
                   | '('! exp^ ')'! 
                   |  ID^
                   |  func_call^;

        exp_reizdal -> exp_atom^
                   |  exp_reizdal '*' exp_atom
                   |  exp_reizdal '/' exp_atom;

        exp_plusmin -> exp_reizdal^
                   |  exp_plusmin '+' exp_reizdal
                   |  exp_plusmin '-' exp_reizdal;
        exp ->      
                   |  exp_plusmin^
                   |  STRING^;

        stat -> var_def^ | func_call^ | if^ | id_asign^;
        block -> stat*;
        root ->  block^;
    }
}