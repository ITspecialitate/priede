grammar priede
{
    options{
        Axiom = "root";
        Separator = "SEPARATOR";
    }
    terminals{
        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C;
        LineTerminator  -> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;
        SEPARATOR   -> WHITE_SPACE+ | U+000A | LineTerminator;

        ID -> [a-zA-ZēūīāšģķļžčņĒĪĀŠĢĶĻŽČŅ_-]+;
        QUOTE -> '"';
        INTEGER -> [1-9] [0-9]* | '0' ;
        NUMBER -> INTEGER | '-'INTEGER;
        
        

        STRING	-> '"' (
									(. - ('"' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '"' |
                                '\'' (
									(. - ('\'' | LineTerminator | '\\'))
									| '\\' LineTerminator
									| '\\' ('\'' | '"' | '\\' | [bfnrtv])
									| '\\x' [0-9a-fA-F]{2}
									| '\\u' [0-9a-fA-F]{4}
									| '\\0'
								)* '\'' ;
		
    }
    rules{
        BOOL_DEF -> 'būls'!;
        TEXT -> 'teksts'!;
        NUM -> 'skaitlis'!;
        LONG -> 'liels skaitlis'! | 'skaitlis liels'!;
        NATURAL -> 'naturāls skailtis'! | 'skaitlis naturāls'!;
        LONG_NAT -> 'naturāls liels skaitlis'! | 'liels naturāls skaitlis'!;

        TYPE -> BOOL_DEF^ | TEXT^ | LONG^ | NATURAL^ | LONG_NAT^ | NUM^;

        TRUE -> 'PAT'! | 'PATIESS'!;
        FALSE -> 'NEPAT'! | 'NEPATIESS'!;
        BOOL -> TRUE | FALSE;
        var_def -> TYPE ID '='! var_def_value;
        var_def_value -> STRING^|NUMBER^|BOOL^;

        func_call -> ID '('! funcargs ')'!
                   | ID '()'! ;

        funcargs -> exp|exp (','! exp)*;

        comp_s ->    exp '==' exp
                   | exp '>' exp
                   | exp '>=' exp
                   | exp '<' exp
                   | exp '>=' exp
                   | exp '!=' exp;

        comp -> comp_s^ |
                comp_s^ 'vai' comp |
                comp_s^ 'un' comp|
                BOOL^;

        if -> 'ja'! comp '{'! block '}'!;

        exp_atom -> NUMBER^
                   | '('! exp^ ')'! 
                   |  ID^
                   |  func_call^;

        exp_reizdal -> exp_atom^
                   |  exp_reizdal '*' exp_atom
                   |  exp_reizdal '/' exp_atom;

        exp_plusmin -> exp_reizdal^
                   |  exp_plusmin '+' exp_reizdal
                   |  exp_plusmin '-' exp_reizdal;
        exp ->
                   |  exp_plusmin^
                   |  STRING^;

        stat -> var_def^ | func_call^ | if^;
        block -> stat*;
        root ->  block^;
    }
}